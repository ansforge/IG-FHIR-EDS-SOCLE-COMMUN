map "https://interop.esante.gouv.fr/ig/fhir/eds/StructureMap/Patient" = "Patient"

/// name = 'Patient'
/// title = 'Mapping Patient resource to Person, Location and Death OMOP Domain'
/// status = 'draft'

uses "https://interop.esante.gouv.fr/ig/fhir/eds/StructureDefinition/EDSPatient" alias Patient as source
uses "https://interop.esante.gouv.fr/ig/fhir/eds/StructureDefinition/LogicalBundle" alias LogicalBundle as target
uses "https://interop.esante.gouv.fr/ig/fhir/eds/StructureDefinition/OMOPPerson" alias PersonTable as target
uses "https://interop.esante.gouv.fr/ig/fhir/eds/StructureDefinition/OMOPLocation" alias LocationTable as target
uses "https://interop.esante.gouv.fr/ig/fhir/eds/StructureDefinition/OMOPDeath" alias DeathTable as target

imports "https://interop.esante.gouv.fr/ig/fhir/eds/StructureMap/Person"
imports "https://interop.esante.gouv.fr/ig/fhir/eds/StructureMap/Location"
imports "https://interop.esante.gouv.fr/ig/fhir/eds/StructureMap/Death"

group Patient(source src: Patient, target tgtBundle : LogicalBundle) {
	src -> tgtBundle.id = uuid() "setId";
	src -> tgtBundle.type = 'transaction' "setType";
	src -> tgtBundle.entry as newEntry then {
		src -> newEntry.person = create("PersonTable") as newPerson then {
			src then Person(src, newPerson) "transformPerson";
		} "createPerson";
	} "newEntryPerson";
	src.address as srcAddress where use = 'home' and period.end.empty() -> tgtBundle.entry as newEntry then {
		srcAddress -> newEntry.location = create("LocationTable") as newLocation then {
			srcAddress then MultiLocation(srcAddress, newLocation) "transformLocation";
		} "createLocation";
	} "newEntryLocation";
	src where deceased.is(System.DateTime) or deceased.is(System.Boolean) -> tgtBundle.entry as newEntry then {
		src -> newEntry.death = create("DeathTable") as newDeath then {
			src then Death(src, newDeath) "transformDeath";
		} "createDeath";
	} "newEntryDeath";
}
